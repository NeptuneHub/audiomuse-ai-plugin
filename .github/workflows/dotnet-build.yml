# Name for your GitHub Actions workflow. This will be displayed in the "Actions" tab.
name: .NET Build and Release

# Controls when the workflow will run.
on:
  push:
    # Triggers on pushes to the 'master' branch.
    branches:
      - master
    # Triggers on pushes of new tags that start with 'v' (e.g., v1.0, v1.0.1).
    tags:
      - 'v*'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # The "build" job.
  build:
    # The type of virtual machine to run the job on.
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out your repository's code so the workflow can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up the .NET 8.0 SDK environment.
      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Step 3: Restore the NuGet packages for your project.
      - name: Restore dependencies
        run: dotnet restore ./Jellyfin.Plugin.AudioMuseAi/Jellyfin.Plugin.AudioMuseAi.csproj

      # == Logic for 'master' branch pushes ==

      # Step 4a: Build for the master branch (for testing/development). This step only runs on pushes to master.
      - name: Build for master branch
        if: github.ref == 'refs/heads/master'
        run: dotnet build --configuration Release --no-restore ./Jellyfin.Plugin.AudioMuseAi/Jellyfin.Plugin.AudioMuseAi.csproj

      # Step 4b: Upload the DLL as a temporary build artifact. This allows you to download dev builds.
      - name: Upload master build artifact
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v4
        with:
          name: Jellyfin.Plugin.AudioMuseAi-master-build
          path: ./Jellyfin.Plugin.AudioMuseAi/bin/Release/net8.0/Jellyfin.Plugin.AudioMuseAi.dll

      # == Logic for new version tag pushes ==

      # Step 5a: Extract version from git tag (e.g., v1.0.1 becomes 1.0.1). This step only runs for tags.
      - name: Extract version from tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      # Step 5b: Build the project with the version from the tag.
      - name: Build project for release
        if: startsWith(github.ref, 'refs/tags/v')
        run: dotnet build --configuration Release --no-restore -p:Version=${{ env.VERSION }} ./Jellyfin.Plugin.AudioMuseAi/Jellyfin.Plugin.AudioMuseAi.csproj

      # Step 6: Create the GitHub Release. This step only runs for tags.
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 7: Upload the compiled DLL to the GitHub Release. This step only runs for tags.
      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Jellyfin.Plugin.AudioMuseAi/bin/Release/net8.0/Jellyfin.Plugin.AudioMuseAi.dll
          asset_name: Jellyfin.Plugin.AudioMuseAi.dll
          asset_content_type: application/octet-stream
