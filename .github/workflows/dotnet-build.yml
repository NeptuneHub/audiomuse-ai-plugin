# Name for your GitHub Actions workflow. This will be displayed in the "Actions" tab.
name: .NET Build and Release

# Controls when the workflow will run.
on:
  push:
    # Triggers on pushes to the 'master' branch.
    branches:
      - master
    # Triggers on pushes of new tags that start with 'v' (e.g., v1.0, v1.0.1).
    tags:
      - 'v*'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # The "build-and-release" job.
  build-and-release:
    # The type of virtual machine to run the job on.
    runs-on: ubuntu-latest

    # CRITICAL: Add permissions for the job to create releases.
    permissions:
      contents: write

    steps:
      # Step 1: Check out your repository's code so the workflow can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up the .NET 8.0 SDK environment.
      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Step 3: Restore the NuGet packages for your project.
      - name: Restore dependencies
        run: dotnet restore ./Jellyfin.Plugin.AudioMuseAi/Jellyfin.Plugin.AudioMuseAi.csproj

      # Step 4: Determine the version number based on the trigger.
      - name: Determine Version
        id: get_version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            # For master branch, use a dev version with the commit hash.
            echo "VERSION=0.0.0-dev.${GITHUB_SHA::7}" >> $GITHUB_ENV
          else
            # For tags, use the tag name (e.g., v1.0.1 becomes 1.0.1).
            echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
          fi

      # Step 5: Build the project with the determined version.
      - name: Build project
        run: dotnet build --configuration Release --no-restore -p:Version=${{ env.VERSION }} ./Jellyfin.Plugin.AudioMuseAi/Jellyfin.Plugin.AudioMuseAi.csproj

      # Step 6: Create a GitHub Release and upload the DLL.
      # This action handles both "latest" for master and versioned releases for tags.
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # Use 'latest' for master branch, otherwise use the git tag.
          tag_name: ${{ github.ref == 'refs/heads/master' && 'latest' || github.ref_name }}
          # Mark 'latest' releases as pre-releases.
          prerelease: ${{ github.ref == 'refs/heads/master' }}
          # Attach the compiled DLL to the release.
          files: ./Jellyfin.Plugin.AudioMuseAi/bin/Release/net8.0/Jellyfin.Plugin.AudioMuseAi.dll
