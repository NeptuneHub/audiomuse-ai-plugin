# Name for your GitHub Actions workflow. This will be displayed in the "Actions" tab.
name: .NET Build and Release

# Controls when the workflow will run.
on:
  # Triggers the workflow on push events but only for tags that start with 'v' (e.g., v1.0, v1.0.1).
  push:
    tags:
      - 'v*'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # The "build" job.
  build:
    # The type of virtual machine to run the job on.
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out your repository's code so the workflow can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up the .NET 8.0 SDK environment.
      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Step 3: Restore the NuGet packages for your project.
      - name: Restore dependencies
        run: dotnet restore ./Jellyfin.Plugin.AudioMuseAi/Jellyfin.Plugin.AudioMuseAi.csproj

      # Step 4: Extract version from git tag (e.g., v1.0.1 becomes 1.0.1).
      - name: Extract version
        id: get_version
        run: echo "VERSION=${{ github.ref_name#v }}" >> $GITHUB_ENV

      # Step 5: Build the project with the version from the tag.
      - name: Build project
        run: dotnet build --configuration Release --no-restore -p:Version=${{ env.VERSION }} ./Jellyfin.Plugin.AudioMuseAi/Jellyfin.Plugin.AudioMuseAi.csproj

      # Step 6: Create the GitHub Release.
      # This action creates a new release draft associated with the tag that triggered the workflow.
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 7: Upload the compiled DLL to the GitHub Release.
      # This attaches your plugin's DLL to the release created in the previous step.
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Jellyfin.Plugin.AudioMuseAi/bin/Release/net8.0/Jellyfin.Plugin.AudioMuseAi.dll
          asset_name: Jellyfin.Plugin.AudioMuseAi.dll
          asset_content_type: application/octet-stream
